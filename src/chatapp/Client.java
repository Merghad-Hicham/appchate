package chatapp;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import javax.swing.JOptionPane;

public class Client extends javax.swing.JFrame {
final String username=Login.username;
int start=0;
Thread T = new Thread(new ClientRun());
int port =2222;
Socket socket;
BufferedReader reader;
PrintWriter writer;
//ArrayList<Converssation> converssation = new ArrayList<>();
 
    
    //*************************************
       public  void sendToServer(String message,String sendto,String key){
    try{
            socket = new Socket("localhost",port);
            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            writer = new PrintWriter(socket.getOutputStream());
            writer.println(message+":"+username+":"+sendto+":"+key);
             writer.flush();
              
    }  catch(Exception e){
          JOptionPane.showMessageDialog(null,"server not started");
    }

}
       public class ClientRun implements Runnable{

        @Override
        public void run() {
                String[] data;           
         while(true){
                 try{
                     String msg=reader.readLine();
                data=msg.split(":");
                if(data[data.length-1].equals("addconnect")){
                      list1.removeAll();
         if(!(username.equals(data[0])) && !("addconnect".equals(data[0])) && !data[0].equals("NoOne"))
                      list1.add(data[0]);
                   for(int i=1;i<data.length;i++){
                        if(!(username.equals(data[i])) && !("addconnect".equals(data[i]))){
                            if(ListTest(data[i])!=1)
                            list1.add(data[i]);
                        }
                  
                   } 
                   if(data.length==2)
                       list1.add("No Client for now");
                   if(start==2){
                       T.destroy();
                   }
                 
                }
            
                
                if(data[2].equals(username)&& data[3].equals("chat")){
                    areaclient.append(data[1]+" : "+data[0]+"\n");
                   // converssation.add(new Converssation(data[0],data[1]));
                }
                  if(data[3].equals("newlogin")&& !(username.equals(data[1]))){
                  //  areaclient.append("from server : "+data[0]+"\n");
                }
                  
                  
              
                
                  }catch(Exception e){
                  
                       }
           
        
                 
        }
        } 
       }
       public void ThreadListner(){
   
  T.start();
    
}
       public int ListTest(String s){
           if(list1.countItems()!=0){
                for(int i=0;i<list1.countItems();i++){
                if(list1.getItem(i).equals(s)){
                    return 1;
                }
           }
           }
          
          
           return 0;
       }
       
       public void desconnect(){
                     Login cf=new Login();
                        cf.setTitle("Login Interface");
                        cf.setVisible(true);
       }
    //*************************************
    public Client() {
        initComponents();
        this.addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {
                sendToServer("start","start","newlogin");
                 ThreadListner();
            }

            @Override
            public void windowClosing(WindowEvent e) {
                sendToServer("start","start","newlogin");
               start=2;
            }

            @Override
            public void windowClosed(WindowEvent e) {
            }

            @Override
            public void windowIconified(WindowEvent e) {
            }

            @Override
            public void windowDeiconified(WindowEvent e) {
            }

            @Override
            public void windowActivated(WindowEvent e) {
            }

            @Override
            public void windowDeactivated(WindowEvent e) {
            }
        });
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        msg = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        stat = new javax.swing.JButton();
        list1 = new java.awt.List();
        jScrollPane1 = new javax.swing.JScrollPane();
        areaclient = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(792, 450));
        getContentPane().setLayout(null);

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Username :");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(70, 10, 68, 14);

        msg.setColumns(20);
        msg.setRows(5);
        jScrollPane2.setViewportView(msg);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(40, 350, 310, 43);

        jButton1.setText("Envoyer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(360, 353, 100, 30);

        stat.setText("Se d√©connecter");
        stat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statActionPerformed(evt);
            }
        });
        getContentPane().add(stat);
        stat.setBounds(530, 370, 160, 23);
        getContentPane().add(list1);
        list1.setBounds(530, 50, 160, 300);

        areaclient.setColumns(20);
        areaclient.setRows(5);
        jScrollPane1.setViewportView(areaclient);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(40, 40, 430, 300);

        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\user\\Desktop\\chatapp project\\images\\BACK4.png")); // NOI18N
        jLabel2.setPreferredSize(new java.awt.Dimension(800, 445));
        getContentPane().add(jLabel2);
        jLabel2.setBounds(-10, -10, 790, 450);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void statActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statActionPerformed
      
       start=2;
          desconnect();
           setVisible(false);
          sendToServer("start","start","newlogin");

        
    }//GEN-LAST:event_statActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
             if(list1.getSelectedItem()!=null){
            sendToServer(msg.getText(),list1.getSelectedItem(),"chat");
              areaclient.append("me : "+msg.getText()+"\n");
          msg.setText(null);
        } else
            JOptionPane.showMessageDialog(null,"select a client from list");
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextArea areaclient;
    private javax.swing.JButton jButton1;
    public javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.List list1;
    private javax.swing.JTextArea msg;
    private javax.swing.JButton stat;
    // End of variables declaration//GEN-END:variables
}
